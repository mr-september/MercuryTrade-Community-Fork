name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.4.3, v2.0.0, etc.
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.4.3'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper version detection
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.tag }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Update version in pom.xml
      run: |
        sed -i 's/<project.version>.*<\/project.version>/<project.version>${{ steps.get_version.outputs.version }}<\/project.version>/' pom.xml
        sed -i 's/<fileVersion>.*<\/fileVersion>/<fileVersion>${{ steps.get_version.outputs.version }}.0<\/fileVersion>/' release_files/release_config.xml
        sed -i 's/<txtFileVersion>.*<\/txtFileVersion>/<txtFileVersion>${{ steps.get_version.outputs.version }}<\/txtFileVersion>/' release_files/release_config.xml
        sed -i 's/<productVersion>.*<\/productVersion>/<productVersion>${{ steps.get_version.outputs.version }}.0<\/productVersion>/' release_files/release_config.xml
        sed -i 's/<txtProductVersion>.*<\/txtProductVersion>/<txtProductVersion>${{ steps.get_version.outputs.version }}<\/txtProductVersion>/' release_files/release_config.xml
    
    - name: Build with Maven
      run: mvn clean package -DskipTests
    
    - name: Copy JAR to release files
      run: |
        cp app/target/MercuryTrade.jar release_files/
        ls -la release_files/
    
    - name: Install Launch4j
      run: |
        # Download and install Launch4j
        wget -O launch4j.tgz "https://sourceforge.net/projects/launch4j/files/launch4j-3/3.50/launch4j-3.50-linux-x64.tgz/download"
        tar -xzf launch4j.tgz
        echo "Contents of extracted directory:"
        ls -la launch4j/
        echo "Verifying Launch4j JAR is available:"
        ls -la launch4j/launch4j.jar
        echo "Launch4j installation complete"
    
    - name: Create Windows executable with Launch4j
      run: |
        cd release_files
        java -jar ../launch4j/launch4j.jar release_config.xml
        ls -la
        cd ..
    
    - name: Create release packages
      run: |
        cd release_files
        
        # Create JAR package
        mkdir -p MercuryTrade-jar
        cp MercuryTrade.jar MercuryTrade-jar/
        cp HOW_TO_RUN_JAR.txt MercuryTrade-jar/
        zip -r MercuryTrade-${{ steps.get_version.outputs.version }}-jar.zip MercuryTrade-jar/
        
        # Create EXE package
        mkdir -p MercuryTrade-exe
        cp MercuryTrade.exe MercuryTrade-exe/
        zip -r MercuryTrade-${{ steps.get_version.outputs.version }}-exe.zip MercuryTrade-exe/
        
        # Create language package
        zip -r MercuryTrade-${{ steps.get_version.outputs.version }}-lang.zip ../app-shared/src/main/resources/lang/*
        
        # List created files
        ls -la *.zip
        cd ..
    
    - name: Generate changelog
      id: changelog
      run: |
        # Extract commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG="Initial release"
        else
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD | head -20)
        fi
        
        # Write changelog to file and output
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
        name: MercuryTrade ${{ steps.get_version.outputs.version }}
        body: |
          ## MercuryTrade ${{ steps.get_version.outputs.version }}
          
          ### Downloads
          - **MercuryTrade-jar.zip**: Contains the JAR file for users with Java 8+ installed
          - **MercuryTrade-exe.zip**: Contains the Windows executable (recommended for Windows users)
          - **MercuryTrade-lang.zip**: Additional language packs
          
          ### Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### Installation
          - **JAR version**: Extract the zip file and run with `java -jar MercuryTrade.jar`
          - **EXE version**: Extract the zip file and run the executable directly on Windows
          
          ### Requirements
          - Java 8 or higher
          - Windows 7 or higher (for .exe version)
        files: |
          release_files/MercuryTrade-${{ steps.get_version.outputs.version }}-jar.zip
          release_files/MercuryTrade-${{ steps.get_version.outputs.version }}-exe.zip
          release_files/MercuryTrade-${{ steps.get_version.outputs.version }}-lang.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
